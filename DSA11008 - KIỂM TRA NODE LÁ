#include <bits/stdc++.h>
using namespace std;

#define MOD 1000000007
#define run() int t; cin >> t; while(t--)
#define fast() ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) x.begin(), x.end()
#define reset(x) memset(x, 0, sizeof(x))
#define fi first
#define se second
#define ll long long
#define db double
#define fl float

struct node{
    int data;
    node *left = NULL;
    node *right = NULL;
    node(int data){
        this -> data = data;
    }
};

struct tree{
    node *root = NULL;
    
    void add_left(node * root, int val, int x){
        if(root == NULL) return;
        if(root -> data == val && root -> left == NULL){
            root -> left = new node(x);
            return;
        }
        add_left(root -> left, val, x);
        add_left(root -> right, val, x);
    }
    void add_right(node * root, int val, int x){
        if(root == NULL) return;
        if(root -> data == val && root -> right == NULL){
            root -> right = new node(x);
            return;
        }
        add_right(root -> left, val, x);
        add_right(root -> right, val, x);
    }
    int level(node *root, set<int> &s, int d){
        if(root == NULL) return 0;
        int cnt = 0;
        if(root -> left == NULL && root -> right == NULL){
            if(!s.count(d)){
                s.insert(d);
                return 1;
            }
        }
        cnt += level(root -> left, s, d + 1);
        cnt += level(root -> right, s, d + 1);
        return cnt;
    }
};

int main(){
    fast();
    run(){
        int n; cin >> n;
        tree T;
        for(int i = 0; i < n; i++){
            int par, x; char c;
            cin >> par >> x >> c;
            if(T.root == NULL) T.root = new node(par);
            if(c == 'L')
                T.add_left(T.root, par, x);
            else
                T.add_right(T.root, par, x);
        }
        set<int> s;
        if(T.level(T.root,s,0) > 1) cout << 0 << endl;
        else cout << 1 << endl;
    }
}
