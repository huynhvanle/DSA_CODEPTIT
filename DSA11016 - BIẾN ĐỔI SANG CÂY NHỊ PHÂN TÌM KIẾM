#include <bits/stdc++.h>
using namespace std;

#define MOD 1000000007
#define run() int t; cin >> t; while(t--)
#define fast() ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) x.begin(), x.end()
#define reset(x) memset(x, 0, sizeof(x))
#define fi first
#define se second
#define ll long long
#define db double
#define fl float

struct node{
    int data;
    node *left = NULL;
    node *right = NULL;
    node(int data){
        this -> data = data;
    }
};

struct tree{
    node *root = NULL;
    unordered_map<int, node*> nodes;
    void add(int par, int x, char dir){
        if(nodes.find(par) == nodes.end()){
            nodes[par] = new node(par);
            if(!root) root = nodes[par];
        }
        node *child = new node(x);
        node *parent = nodes[par];
        nodes[x] = child;
        if(dir == 'R')
            parent -> right = child;
        else
            parent -> left = child;
    }
    void swapin(node *root, vector<int> &v){
        if(root == NULL) return;
        swapin(root -> left, v);
        v.push_back(root -> data);
        swapin(root -> right, v);
    }
    void makebst(node *root, vector<int> &v, int *i){
        if(root == NULL) return;
        makebst(root -> left, v, i);
        root -> data = v[(*i)++];
        makebst(root -> right, v, i);
    }
    void inorder(node *root){
        if(!root) return;
        inorder(root -> left);
        cout << root -> data << " ";
        inorder(root -> right);
    }
};

int main(){
    fast();
    run(){
        int n; cin >> n;
        tree t;
        for(int i = 0; i < n; i++){
            int par, x; char dir;
            cin >> par >> x >> dir;
            t.add(par, x, dir);
        }
        vector<int> v;
        t.swapin(t.root, v);
        sort(all(v));
        int i = 0;
        t.makebst(t.root, v, &i);
        t.inorder(t.root);
        cout << endl;
    }
}
