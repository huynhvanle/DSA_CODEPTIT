#include <bits/stdc++.h>
using namespace std;

#define MOD 1000000007
#define run() int t; cin >> t; while(t--)
#define fast() ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) x.begin(), x.end()
#define reset(x) memset(x, 0, sizeof(x))
#define fi first
#define se second
#define ll long long
#define db double
#define fl float

struct node{
    int data;
    node *left = NULL;
    node *right = NULL;
    node(int data){
        this -> data = data;
    }
};

struct tree{
    node *root = NULL;
    
    void add(node *root, int par, int x, char dir){
        if(!root) return;
        if(root -> data == par){
            if(dir == 'L' && root -> left == NULL){
                root -> left = new node(x);
                return;
            }else if(dir == 'R' && root -> right == NULL){
                root -> right = new node(x);
                return;
            }
        }
        add(root -> left, par, x, dir);
        add(root -> right, par, x, dir);
    }
    bool is_same(node *root1, node *root2){
        if(!root1 && !root2) return 1;
        if(!root1 || !root2) return 0;
        if(root1 -> data != root2 -> data)
            return 0;
        if(is_same(root1 -> left, root2 -> left) && is_same(root1 -> right, root2 -> right))
            return 1;
        return 0;
    }
    
    friend bool operator == (tree &t1, tree &t2){
       return t1.is_same(t1.root, t2.root);
    }
    
};

int main(){
    fast();
    run(){
        int n; cin >> n;
        tree t1, t2;
        for(int i = 0; i < n; i++){
            int par, x; char dir;
            cin >> par >> x >> dir;
            if(t1.root == NULL) t1.root = new node(par);
            t1.add(t1.root, par, x, dir);
        }
        cin >> n;
        for(int i = 0; i < n; i++){
            int par, x; char dir;
            cin >> par >> x >> dir;
            if(t2.root == NULL) t2.root = new node(par);
            t2.add(t2.root, par, x, dir);
        }
        if(t1 == t2) cout << 1 << endl;
        else cout << 0 << endl;
    }
}
